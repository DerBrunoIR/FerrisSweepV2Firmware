/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

&mt {
    //  flavor = "tap-preferred";

    tapping_term_ms = <300>;
};

&sl {
    release-after-ms = <2000>;
};

/ {
    behaviors {
        mm_tab_enter: mm_tab_enter {
            compatible = "zmk,behavior-mod-morph";
            label = "mm_tab_enter";
            #binding-cells = <0>;
            bindings =
                <&kp ENTER>,
                <&kp TAB>;

            mods = <MOD_RALT>;
        };
        mm_shift_caps: mm_shift_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "mm_shift_caps";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_SHIFT>,
                <&kp CAPS>;

            mods = <MOD_RALT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc_1 {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        combo_esc_2 {
            bindings = <&kp ESC>;
            key-positions = <9 8>;
        };

        new_combo {
            bindings = <&tog 2>;
            key-positions = <32 15>;
        };

        new_combo {
            bindings = <&tog 2>;
            key-positions = <31 14>;
        };

        new_combo {
            bindings = <&tog 3>;
            key-positions = <4 31 0>;
        };

        new_combo {
            bindings = <&tog 3>;
            key-positions = <9 5 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
  &kp Q   &kp W   &kp E                   &kp R   &kp T     &kp Z                   &kp U      &kp I    &kp O           &kp P
  &kp A   &kp S   &kp D                   &kp F   &kp G     &kp H                   &kp J      &kp K    &kp L   &mm_tab_enter
  &kp Y   &kp X   &kp C                   &kp V   &kp B     &kp N                   &kp M  &kp COMMA  &kp DOT  &mm_shift_caps
                         &mt LEFT_CONTROL SPACE  &tog 1  &sk RALT  &mt LEFT_ALT BACKSPACE
            >;
        };

        NUMERIC {
            bindings = <
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
  &kp QUESTION      &kp HASH         &none         &none         &none     &kp CARET      &kp PLUS     &kp MINUS     &kp GRAVE        &trans
 &kp LESS_THAN         &none         &none         &none         &none         &none         &none        &trans        &trans        &trans
                                                  &trans        &trans        &trans        &trans
            >;
        };

        SHORTCUTS {
            bindings = <
 &kp F1          &kp F2            &kp F3             &kp F4           &kp F5                  &kp HOME           &kp PAGE_UP         &kp PAGE_DOWN                   &kp END   &none
  &none  &kp C_PREVIOUS   &kp K_VOLUME_UP  &kp K_VOLUME_DOWN       &kp C_NEXT                  &kp LEFT                &kp UP              &kp DOWN                 &kp RIGHT  &trans
  &none           &none  &kp C_PLAY_PAUSE         &kp C_MUTE  &kp PRINTSCREEN  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_MAXIMUM  &trans
                                                      &trans           &trans                    &trans                &trans
            >;
        };

        SYSTEM {
            bindings = <
           &reset        &bootloader   &none    &bt BT_CLR  &bt BT_SEL 2  &bt BT_SEL 2    &bt BT_CLR   &none       &bootloader             &reset
     &out OUT_USB       &out OUT_BLE   &none  &bt BT_SEL 0  &bt BT_SEL 3  &bt BT_SEL 3  &bt BT_SEL 0   &none      &out OUT_BLE       &out OUT_USB
 &ext_power EP_ON  &ext_power EP_OFF   &none  &bt BT_SEL 1  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 1   &none  &ext_power EP_ON  &ext_power EP_OFF
                                                    &trans        &trans        &trans        &trans
            >;
        };
    };
};
